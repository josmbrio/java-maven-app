#!/usr/bin/env groovy

library identifier: 'jenkins-shared-library@master', retriever: modernSCM(
[$class: 'GitSCMSource',
 remote: 'https://github.com/josmbrio/jenkins-shared-library.git',
 credentialsId: 'gitlab-credentials'
]
)

def gv
pipeline {
        agent any
        tools {
            maven 'maven-3.8.6'   // Con esto maven estara disponible en todo el pipeline.
                            // El nombre debe ser igual al nombre configurado en la Configuracion Global de Jenkins.
        }
        environment {
            DEPLOY_SERVER_KEY = 'server-ssh-key'
            GITLAB_SERVER = 'myserver'
        }
        stages {
            stage("init") {
                steps {
                    script {
                        gv = load "script-3.groovy"
                    }
                }
            }
            stage("increment version") {
                steps {
                    script {
                        echo "incrementing app version"
                        sh 'mvn build-helper:parse-version versions:set \
                            -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion} \
                            versions:commit'
                        def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
                        def version = matcher[0][1]
                        env.IMAGE_NAME = "josmbrio/my-repo:jma-$version-$BUILD_NUMBER"
                    }
                }
            }
            stage("build app") {
                steps {
                    script {
                        gv.message()
                        //buildJar()
                        sh 'mvn clean package'
                    }
                }
            }
            stage("build image") {
                steps {
                    script {
                        buildImage(env.IMAGE_NAME)
                        dockerLogin()
                        dockerPush(env.IMAGE_NAME)
                    }
                }
            }
            stage("provision server") {
                environment {
                    AWS_ACCESS_KEY_ID = credentials('jenkins_aws_access_key_id')
                    AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
                    TF_VAR_env_prefix = 'test'
                }
                steps {
                    script {
                        dir('terraform'){
                            sh "terraform init"
                            sh "terraform apply --auto-approve"
                            EC2_PUBLIC_IP = sh(
                                script: "terraform output ec2_public_ip",
                                returnStatus: true
                            )
                        }   
                    }
                }
                
            }
            stage("deploy") {
                steps {
                    script {

                        echo "Waiting for EC2 server to initialize"
                        sleep(time: 90, unit: "SECONDS")

                        echo "deploying docker image to EC2 or localserver"
                        echo "${EC2_PUBLIC_IP}"

                        def shellCmd = 'bash server-cmds.sh ${IMAGE_NAME}'
                        def ec2Instance = "ec2-user@${EC2_PUBLIC_IP}"
                        
                        sshagent(["${DEPLOY_SERVER_KEY}"])  {
                            sh "scp -o StrictHostKeyChecking=no server-cmds.sh ${ec2Instance}:/home/josmbrio/"
                            sh "scp -o StrictHostKeyChecking=no docker-compose.yaml ${ec2Instance}:/home/josmbrio/"
                            sh "ssh -o StrictHostKeyChecking=no ${ec2Instance}	${shellCmd}"
                        }
                    }
                }
            }
        }
}
